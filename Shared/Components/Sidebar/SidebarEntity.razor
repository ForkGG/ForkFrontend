@using ProjectAveryFrontend.Logic.Services.Notifications
@using ProjectAveryCommon.Model.Entity.Pocos
@using ProjectAveryCommon.Model.Notifications.EntityNotifications
@inject ILogger<SidebarEntity> _logger
@inject INotificationService _notificationService

<div class="@(IsSelected ? "bg-forkBlue-hover text-label-hover" : "text-label hover:text-label-hover") w-full flex items-center py-3 pl-5 cursor-pointer" @onclick="OnSelectEntity">
    @* Status *@
    @* TODO CKE actual status *@
    <StatusIndicator Status="Value.Status"></StatusIndicator>
    @* Icon *@
    <span class="icon px-3 text-2xl">1</span>
    @* Content *@
    <div class="flex-1">
        <p class="text-md">@Value.Name</p>
        <p class="text-sm">0/100</p>
    </div>
    @* Selected Indicator *@
    <SelectedIndicatorVertical IsVisible="IsSelected" ParentHeight="72" NegativeYMargins="3"></SelectedIndicatorVertical>
</div>

@code {

    [Parameter]
    [EditorRequired]
    public IEntity Value { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback<IEntity> OnClickCallback { get; set; }

    [Parameter]
    public bool IsSelected { get; set; }

    protected override Task OnInitializedAsync()
    {
        _notificationService.Register<EntityStatusChangedNotification>(async notification => { await HandleEntityStatusChanged(notification); });
        return base.OnInitializedAsync();
    }

    private async Task OnSelectEntity()
    {
        if (OnClickCallback.HasDelegate)
        {
            await OnClickCallback.InvokeAsync(Value);
        }
    }

    private Task HandleEntityStatusChanged(EntityStatusChangedNotification statusChangedNotification)
    {
        if (Value.Id != statusChangedNotification.EntityId)
            return Task.CompletedTask;

        Value.Status = statusChangedNotification.NewEntityStatus;
        StateHasChanged();
        return Task.CompletedTask;
    }

}