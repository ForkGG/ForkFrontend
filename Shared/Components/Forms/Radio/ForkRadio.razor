@using System.Diagnostics.CodeAnalysis
@using ForkFrontend.Model
@using ForkFrontend.Model.Forms
@typeparam TModelValue
@inherits AbstractForkInput<TModelValue>
@implements IValueListInput<TModelValue, string>

<div class="mt-3">
    <label class="text-label text-md">@Label</label>
    @if (RadioType == RadioType.ButtonRow)
    {
        <div class="flex flex-wrap gap-4 ml-5 mt-2">
            @{ int index = 0; }
            @foreach (var value in Values!)
            {
                <div>
                    <input type="radio" name="@Name" id="@($"{Name}{index}")" class="hidden"
                           @onchange="@(_ => CurrentValue = value.ModelValue)"/>
                    <div class="flex px-4 py-0.5 bg-button clip-bottom-right">
                        <label for="@($"{Name}{index}")"
                               class="cursor-pointer font-bold @(CurrentValue != null && CurrentValue.Equals(value.ModelValue) ? "text-label-hover" : "hover:text-label-hover text-forkBlue")">
                            @if(value.Icon != null){
                                <span class="pr-2 font-normal icon">@value.Icon</span>
                            }
                            <span>@value.ViewValue</span>
                        </label>
                    </div>
                </div>
                index++;
            }
        </div>
    }
    else 
    {
        <div class="ml-5 mt-2">
            @{ int index = 0; }
            @foreach (var value in Values!)
            {
                <div>
                    <input type="radio" name="@Name" id="@($"{Name}{index}")" @onchange="@(_ => CurrentValue = value.ModelValue)"/>
                    <label for="@($"{Name}{index}")">@value.ViewValue</label>
                </div>
                index++;
            }
        </div>
    }

</div>

@code {

    [Parameter]
    public List<ForkFormEntity<TModelValue, string>>? Values { get; set; }

    [Parameter]
    public RadioType RadioType { get; set; } = RadioType.Default;

    protected override bool TryParseValueFromString(string? value, out TModelValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        throw new NotSupportedException($"This component does not parse string inputs. Bind to the '{nameof(CurrentValue)}' property, not '{nameof(CurrentValueAsString)}'.");
    }
    
    /// <summary>
    /// Override to make sure <see cref="Values"> is set
    /// </summary>
    public override Task SetParametersAsync(ParameterView parameters)
    {
        var result = base.SetParametersAsync(parameters);
        Values ??= new List<ForkFormEntity<TModelValue, string>>();
        return result;
    }

}