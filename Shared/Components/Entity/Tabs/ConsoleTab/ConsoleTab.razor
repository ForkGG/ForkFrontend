@using ForkCommon.Model.Entity.Pocos
@using ForkCommon.Model.Notifications.EntityNotifications
@using ForkFrontend.Logic.Services.Managers
@using ForkFrontend.Logic.Services.Notifications
@inherits EntityTab
@inject IApplicationStateManager _application

<div class="flex-1 flex bg-forkBlue gap-4 p-4 overflow-hidden">
    @* Center Part *@
    <div class="flex-1 flex flex-col gap-4">
        @* Console Out *@
        <ConsoleOut></ConsoleOut>

        @* Console In *@
        <ConsoleIn></ConsoleIn>

        @* IP and Restart Counter *@
        <div class="ip-container clipping h-12 max-w-max">
            <div class="flex h-full">
                <span class="text-xs text-label py-1">IP Address</span>
                <span class="mx-8 self-center text-text monospace">@BuildIpString()</span>
            </div>
        </div>
    </div>

    @* Hardware Stats *@
    <div class="flex flex-col gap-4 overflow-auto scroll-hidden">
        <PerformanceMonitor Content="@CpuPercentage.ToString()" SubTitle="%" Name="CPU" ColorIntensity="@(Math.Min(CpuPercentage - CpuPercentage % 10, 100))"></PerformanceMonitor>
        <div class="performance-container">
            <PerformanceMonitor Content="@MemoryPercentage.ToString()" SubTitle="%" Name="RAM" ColorIntensity="@(Math.Min(MemoryPercentage - MemoryPercentage % 10, 100))"></PerformanceMonitor>
            <div class="flex text-forkBlue-highlighted text-xs cursor-pointer">
                <span>2048 MB</span>
                <span class="leading-none ml-1">...</span>
            </div>
        </div>
        <PerformanceMonitor Content="@($"{Uptime.TotalHours:00}:{Uptime.Minutes:00}")" SubTitle="H:M" Name="UP<br>TIME" ColorIntensity="0"></PerformanceMonitor>
    </div>
</div>

@code {

    [CascadingParameter]
    public EntityStateManager? EntityState { get; set; }

    private int CpuPercentage { get; set; } = 0;
    private int MemoryPercentage { get; set; } = 0;
    private TimeSpan Uptime { get; set; } = TimeSpan.Zero;

    protected override void OnInitialized()
    {
        EntityState!.EntityPerformanceNotificationHandler.After += HandlePerformanceNotification;
    }

    private Task HandlePerformanceNotification(EntityPerformanceNotification performanceNotification)
    {
        CpuPercentage = (int) performanceNotification.CpuPercentage;
        MemoryPercentage = (int) performanceNotification.RamPercentage;
        Uptime = performanceNotification.Uptime;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private string BuildIpString()
    {
        string ip = _application.ForkExternalIp;
        if (EntityState?.Entity is Server server)
        {
            return $"{ip}:{server.VanillaSettings.ServerPort}";
        } 
        // TODO Add network support
        // Network.Port;
        return ip;
    }
}