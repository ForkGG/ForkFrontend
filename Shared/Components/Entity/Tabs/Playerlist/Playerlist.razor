@using ProjectAveryFrontend.Logic.Services.Notifications
@using ProjectAveryCommon.Model.Entity.Pocos
@using ProjectAveryCommon.Model.Entity.Pocos.Player
@using ProjectAveryCommon.Model.Notifications.EntityNotifications.PlayerNotifications
@inject INotificationService _notificationService
<div class="h-full bg-forkBlue pt-3">
    @* Player count *@
    <span class="px-7 py-3 text-label-hover">@(Server?.ServerPlayers?.Count(p => p.IsOnline) ?? 0) / @(Server?.VanillaSettings?.MaxPlayers ?? 0) - Online</span>

    @* Player list *@
    <div class="h-full overflow-y-auto mt-3">
        @if (Server?.ServerPlayers != null)
        {
            Server.ServerPlayers.Sort();
            foreach (var player in Server.ServerPlayers)
            {
                <CascadingValue Value="this">
                    <ServerPlayerComponent Value="player"></ServerPlayerComponent>
                </CascadingValue>
            }
        }
    </div>
</div>

@code {

    [CascadingParameter]
    public IEntity? Entity { get; set; }

    private Server? Server => Entity as Server;

    public ServerPlayer? ActivePlayer { get; set; }

    public void SelectPlayer(ServerPlayerComponent playerComponent)
    {
        ActivePlayer = playerComponent.Value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _notificationService.Register<UpdatePlayerNotification>(HandlePlayerUpdate);
    }

    private async Task HandlePlayerUpdate(UpdatePlayerNotification notification)
    {
        if (Server?.ServerPlayers == null || notification.EntityId != Server.Id)
            return;

        var existing = Server?.ServerPlayers.FirstOrDefault(p => p.Player.Uid == notification.ServerPlayer.Player.Uid);
        if (existing != null)
        {
            existing.IsOnline = notification.ServerPlayer.IsOnline;
            existing.IsOp = notification.ServerPlayer.IsOp;
        }
        else
        {
            Server?.ServerPlayers.Add(notification.ServerPlayer);
        }
        StateHasChanged();
    }

}