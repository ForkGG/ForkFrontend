@using ForkFrontend.Logic.Services.Notifications
@using ForkCommon.Model.Entity.Pocos
@using ForkCommon.Model.Entity.Pocos.Player
@using ForkCommon.Model.Notifications.EntityNotifications.PlayerNotifications
@using ForkCommon.Model.Entity.Enums.Player
@implements ISimplePlayerlist
@inject INotificationService _notificationService
<div class="h-full bg-forkBlue pt-3">
    @* Ban count *@
    <span class="px-7 py-3 text-label-hover">@(Server?.Banlist?.Count ?? 0) - Banned</span>
    @* Player list *@
    <div class="h-full overflow-y-auto mt-3">
        @if (Server?.Banlist != null)
        {
            Server.Banlist.Sort();
            foreach (var player in Server.Banlist)
            {
                <CascadingValue Value="this">
                    <PlayerComponent Value="player"></PlayerComponent>
                </CascadingValue>
            }
        }
    </div>
</div>

@code {

    [CascadingParameter]
    public IEntity? Entity { get; set; }

    private Server? Server => Entity as Server;

    public Player? ActivePlayer { get; set; }

    public void SelectPlayer(PlayerComponent playerComponent)
    {
        ActivePlayer = playerComponent.Value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _notificationService.Register<UpdateBanlistPlayerNotification>(HandlePlayerUpdate);
    }

    private async Task HandlePlayerUpdate(UpdateBanlistPlayerNotification notification)
    {
        if (Server == null || notification.EntityId != Server.Id)
            return;
        Server.Banlist ??= new List<Player>();

        if (notification.UpdateType == PlayerlistUpdateType.Remove)
        {
            Server.Banlist.RemoveAll(p => p.Uid == notification.Player.Uid);
        }
        else
        {
            var existing = Server.Banlist.FirstOrDefault(p => p.Uid == notification.Player.Uid);
    // Update
            if (existing != null)
            {
                existing.Head = notification.Player.Head;
                existing.Name = notification.Player.Name;
                existing.LastUpdated = notification.Player.LastUpdated;
                existing.IsOfflinePlayer = notification.Player.IsOfflinePlayer;
            }
    // Add
            else
            {
                Server.Banlist.Add(notification.Player);
            }
        }
        StateHasChanged();
    }

}